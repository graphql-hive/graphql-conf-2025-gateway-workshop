schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
    
    
    
    
    @link(url: "https://specs.apollo.dev/requiresScopes/v0.1", for: SECURITY)
    @link(url: "https://specs.apollo.dev/authenticated/v0.1", for: SECURITY)
    
  {
    query: Query
    
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        overrideLabel: String
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  directive @requiresScopes(
    scopes: [[requiresScopes__Scope!]!]!
  ) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

  scalar requiresScopes__Scope

  
  directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

  
enum join__Graph {
  INVENTORY @join__graph(name: "inventory", url: "http://localhost:4002/graphql") 
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4001/graphql") 
}

scalar TransportOptions @join__type(graph: INVENTORY)  @join__type(graph: PRODUCTS) 

type Product @join__type(graph: INVENTORY, key: "upc", extension: true)  @join__type(graph: PRODUCTS, key: "upc")  {
  upc: String!
  weight: Int @join__field(graph: INVENTORY, external: true)  @join__field(graph: PRODUCTS) 
  price: Int @join__field(graph: INVENTORY, external: true)  @join__field(graph: PRODUCTS) 
  inStock: Boolean @join__field(graph: INVENTORY)  @authenticated
  shippingEstimate: Int @join__field(graph: INVENTORY, requires: "price weight")  @requiresScopes(scopes: [["shippingEstimate"]]) 
  name: String @join__field(graph: PRODUCTS) 
}

type Query @join__type(graph: INVENTORY)  @join__type(graph: PRODUCTS)  {
  topProducts(first: Int = 5) : [Product] @join__field(graph: PRODUCTS) 
}