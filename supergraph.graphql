schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
    
    
    
    
    @link(url: "https://specs.apollo.dev/requiresScopes/v0.1", for: SECURITY)
    @link(url: "https://specs.apollo.dev/authenticated/v0.1", for: SECURITY)
    @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@rateLimit", "@pubsubOperation", "@pubsubPublish"]
)
  {
    query: Query
    mutation: Mutation
    subscription: Subscription
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        overrideLabel: String
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  directive @requiresScopes(
    scopes: [[requiresScopes__Scope!]!]!
  ) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

  scalar requiresScopes__Scope

  
  directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

  
enum join__Graph {
  POSTS @join__graph(name: "posts", url: "http://localhost:4002/graphql") 
  USERS @join__graph(name: "users", url: "http://localhost:4001/graphql") 
}

directive @rateLimit(max: Int!, window: String!, message: String!)  on FIELD_DEFINITION

directive @pubsubOperation(pubsubTopic: String!)  on FIELD_DEFINITION

directive @pubsubPublish(pubsubTopic: String!)  on FIELD_DEFINITION

scalar TransportOptions @join__type(graph: POSTS)  @join__type(graph: USERS) 

type Mutation @join__type(graph: POSTS)  {
  createPost(title: String!, content: String!) : Post! @rateLimit(
    max: 5
    window: "1m"
    message: "Too many posts created, please try again later."
  ) @pubsubPublish(pubsubTopic: "postAdded")  @requiresScopes(scopes: [["editor"]]) 
}

type Query @join__type(graph: POSTS)  @join__type(graph: USERS)  {
  posts: [Post!]! @join__field(graph: POSTS) 
}

type Subscription @join__type(graph: POSTS)  {
  postCreated: Post! @pubsubOperation(pubsubTopic: "postAdded") 
}

type Post @join__type(graph: POSTS, key: "id")  @join__type(graph: USERS, key: "id")  {
  id: ID!
  title: String! @join__field(graph: POSTS) 
  content: String! @join__field(graph: POSTS) 
  author: User! @join__field(graph: POSTS) 
}

type User @join__type(graph: POSTS, key: "id")  @join__type(graph: USERS, key: "id")  {
  id: ID!
  name: String! @join__field(graph: USERS) 
  email: String! @join__field(graph: USERS)  @authenticated
  liked: [Post!]! @join__field(graph: USERS) 
}